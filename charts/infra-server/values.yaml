# Default configurations
# Ref: https://github.com/infrahq/helm-charts/charts/infra-server

nameOverride: ""
fullnameOverride: ""

## Additional server configurations
config:

  ## Server container service ports
  addr:
    http: 8080
    https: 8443
    metrics: 9090

  ui:
    proxyURL: ""

  admin:
    ## Enable initial admin user
    enabled: true

  ## Database host.
  ## If omitted, a database will be automatically configured
  dbHost: ""

  ## Database port
  ## Default 5432
  dbPort: 5432

  ## Database name
  ## Default infra
  dbName: infra

  ## Database user
  ## Default infra
  dbUsername: infra

  ## Database password.
  ## If omitted, a password will be randomly generated
  ## Ref: https://infrahq.com/docs/reference/helm#secrets
  dbPassword: ""

  ## Additional database parameters
  dbParameters: ""

  ## Path to the database encryption key
  ## If omitted, an encryption key will randomly generated and mounted into the server pod
  ## If set, ensure the secret is accessible within the pod
  dbEncryptionKey: ""

  ## Enable telemetry collection
  enableTelemetry: true

  ## Duration of a user session
  ## Default 30 days
  sessionDuration: 720h0m0s

  ## How frequently a user must use session for it to remain active
  ## Default 3 days
  sessionExtensionDeadline: 72h0m0s

  ## Server TLS configuration.
  ## If omitted, a self-signed CA will be generated
  ## If set, ensure secrets are accessible within the pod
  tls: {}

    ## Path to CA and private key
    # ca: ""
    # caPrivateKey: ""

    # ## Path to certificate and private key
    # certificate: ""
    # privateKey: ""

## Global configurations
global:

  ## Additional labels to apply to all resources
  ## Global values will be merged into local values
  labels: {}

  ## Labels to apply for all deployed pods
  ## Global values will be merged into local values
  podLabels: {}

  ## Annotations to apply for all deployed pods
  ## Global values will be merged into local values
  podAnnotations: {}

  ## Environment variables to pass to all deployed pods
  env: []
    # - name: "INFRA_LOG_LEVEL"
    #   value: "info"

  ## ConfigMap or Secret references containing environment variables to pass to all deploy pods
  ## Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  envFrom: []
    # - configMapRef:
    #     name: configmap-name
    # - secretRef:
    #     name: secret-name

## Server configurations
server:

  ## Deploy server
  enabled: true
  name: server

  ## Number of server pods to run
  ## No effect unless `autoscaling.enabled` is `false`
  replicas: 1

  ## Server image configurations
  image:

    ## The image repository to use for the server deployment
    repository: infrahq/infra

    ## The image tag to use instead of the default {{ .Chart.AppVersion }}
    tag: ""

    ## The pull policy to use when pulling (downloading) the server image
    ## Ref: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
    pullPolicy: IfNotPresent

  ## One or more Secret to use when pulling the server image
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []
    # - name: "image-pull-secret"

  ## Additional labels to apply to all resources
  ## Global values will be merged into local values
  labels: {}

  ## Environment variables to pass to the server container
  env: []
    # - name: "INFRA_LOG_LEVEL"
    #   value: "info"

  ## ConfigMap or Secret references containing environment variables to pass to the server container
  ## Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  envFrom: []
    # - configMapRef:
    #     name: configmap-name
    # - secretRef:
    #     name: secret-name

  ## Server service account configurations
  serviceAccount:

    ## Create the service account
    create: true

    ## Name of the service account to use instead of the default templated fullname
    name: ""

    ## Annotations to apply to the service account
    annotations: {}

    ## Automount service account API credentials
    automountServiceAccountToken: true

  ## Labels to apply to the server pod
  podLabels: {}

  ## Annotations to apply to the server pod
  podAnnotations: {}

  ## Security context for the server pod
  podSecurityContext:
    fsGroup: 2000

  ## Security context for the server container
  securityContext:
    runAsNonRoot: true
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true

  ## Liveness probe for the default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
  livenessProbe:

    ## Minimum number of consecutive successes before the probe is considered successful
    successThreshold: 1

    ## Minimum number of consecutive failures before the probe is considered failed
    failureThreshold: 3

    ## Seconds after container starts before the probe is initialized
    initialDelaySeconds: 10

    ## Seconds between consecutive probes
    periodSeconds: 10

    ## Seconds before the probe times out
    timeoutSeconds: 1

  ## Readiness probe for the default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
  readinessProbe:

    ## Minimum number of consecutive successes before the probe is considered successful
    successThreshold: 1

    ## Minimum number of consecutive failures before the probe is considered failed
    failureThreshold: 3

    ## Seconds after container starts before the probe is initialized
    initialDelaySeconds: 10

    ## Seconds between consecutive probes
    periodSeconds: 10

    ## Seconds before the probe times out
    timeoutSeconds: 1

  ## Additional volumes to attach to the server pod
  volumes: []
    # - name: configmap-volume
    #   configMap:
    #     name: configmap-name
    # - name: secret-volume
    #   secret:
    #     secretName: secret-name

  ## Additioanl volume mounts to attach to the server container
  volumeMounts: []
    # - name: configmap-volume
    #   mountPath: /mnt/configmap
    # - name: secret-volume
    #   mountPath: /mnt/secret
    #   readOnly: true

  ## Server service configurations
  service:

    ## Service type
    ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP

    ## Service labels
    labels: {}

    ## Service annotations
    annotations: {}

    ## HTTP service port
    port: 80

    ## HTTP service port name
    portName: http

    ## HTTP service node port
    ## No effect unless `server.service.type` is `NodePort`
    nodePort: 30080

    ## HTTPS service port
    securePort: 443

    ## HTTPS service port name
    securePortName: https

    ## HTTPS service node port
    ## No effect unless `server.service.type` is `NodePort`
    secureNodePort: 30443

    ## IP of the load balancer to create
    ## No effect unless `server.service.type` is `LoadBalancer`
    loadBalancerIP: ""

    ## Source IP ranges that can access the service
    loadBalancerSourceRanges: []

    ## External IPs that can be used to access the service
    externalIPs: []

    ## Control how traffic from external sources are routed
    ## Supports `Cluster` or `Local`
    externalTrafficPolicy: ""

    ## Control session-based routing of client connections
    ## Supports `ClientIP` or `None`
    sessionAffinity: ""

  ## Metrics configurations
  metrics:

    ## Enable server metrics
    enabled: false

    ## Metrics service configurations
    service:
      ## Metrics service labels
      labels: {}

      ## Metrics service annotations
      annotations: {}

      ## Metrics service port
      port: 9090

      ## Metrics service port name
      portName: metrics

    ## Service monitor configurations
    serviceMonitor:

      ## Enable service monitor
      enabled: false

      ## Service monitor labels
      labels: {}

      ## Service monitor annotations
      annotations: {}

      ## Service monitor scrape interval
      interval: 30s

      ## Prometheus relabel configs to apply to samples before scraping
      relabelings: []

      ## Prometheus metric relabel configs to apply to samples before ingesting
      metricRelabelings: []

  ## Server ingress configurations
  ingress:

    ## Enable server ingress resource
    enabled: false

    ## Ingress labels
    labels: {}

    ## Ingress annotations
    annotations: {}

    ## Name of the ingress controller that will implement this resource
    className: ""

    ## Hostnames to apply this ingress to
    ## Must not be empty if `ingress.enabled` is `true`
    hosts: []
    # - infra.example.com

    ## Paths to apply this ingress to
    paths:
      - /

    ## Type of path
    ## One of `Exact`, `Prefix`, or `ImplementationSpecific`
    pathType: Prefix

    ## Additional paths to attach to the ingress
    additionalPaths: []
      # Kubernetes <1.19, using `networking.k8s.io/v1beta1`
      # - path: /*
      #   backend:
      #     serviceName: ssl-redirect
      #     servicePort: use-annotation
      # Kubernetes >=1.19, using `networking.k8s.io/v1`
      # - path: /*
      #   pathType: Prefix
      #   backend:
      #     service:
      #       name: ssl-redirect
      #       port:
      #         name: use-annotation

    ## Ingress TLS configurations
    tls: []
      # - secretName: infra-tls-certificate
      #   hosts:
      #     - infra.example.com

  ## Resource requests and limits for the server pod
  resources: {}
    # requests:
    #   cpu: 250m
    #   memory: 256Mi
    # limits:
    #   cpu: 500m
    #   memory: 512Mi

  ## Server autoscaling configurations. Enabling autoscaling requires setting resources
  autoscaling:

    ## Enable server autoscaling
    enabled: false

    ## Minimum number of server pods to run
    minReplicas: 1

    ## Maximum number of server pods to run
    maxReplicas: 3

    ## Target average CPU utilization percentage
    # targetCPUUtilizationPercentage: 50

    ## Target average memory utilization percentage
    # targetMemoryUtilizationPercentage: 50

  ## Server node selector configurations
  nodeSelector: {}

  ## Server tolerations configurations
  tolerations: []

  ## Server affinity configurations
  affinity: {}

## UI configurations
ui:

  ## Deploy ui
  enabled: true
  name: ui

  ## Number of ui pods to run
  ## No effect unless `autoscaling.enabled` is `false`
  replicas: 1

  ## UI image configurations
  image:

    ## The image repository to use for the ui deployment
    repository: infrahq/ui

    ## The image tag to use instead of the default {{ .Chart.AppVersion }}
    tag: ""

    ## The pull policy to use when pulling (downloading) the ui image
    ## Ref: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
    pullPolicy: IfNotPresent

  ## One or more Secret to use when pulling the ui image
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []
    # - name: "image-pull-secret"

  ## Additional labels to apply to all resources
  ## Global values will be merged into local values
  labels: {}

  ## Environment variables to pass to the UI container
  env: []
    # - name: "NODE_ENV"
    #   value: "production"

  ## ConfigMap or Secret references containing environment variables to pass to the UI container
  ## Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  envFrom: []
    # - configMapRef:
    #     name: configmap-name
    # - secretRef:
    #     name: secret-name

  ## UI service account configurations
  serviceAccount:

    ## Create the service account
    create: true

    ## Name of the service account to use instead of the default templated fullname
    name: ""

    ## Annotations to apply to the service account
    annotations: {}

    ## Automount service account API credentials
    automountServiceAccountToken: true

  ## Labels to apply to the ui pod
  podLabels: {}

  ## Annotations to apply to the ui pod
  podAnnotations: {}

  ## Security context for the ui pod
  podSecurityContext:
    fsGroup: 2000

  ## Security context for the UI container
  securityContext:
    runAsNonRoot: true
    runAsUser: 999
    runAsGroup: 999
    readOnlyRootFilesystem: true

  ## Liveness probe for the default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
  livenessProbe:

    ## Minimum number of consecutive successes before the probe is considered successful
    successThreshold: 1

    ## Minimum number of consecutive failures before the probe is considered failed
    failureThreshold: 3

    ## Seconds after container starts before the probe is initialized
    initialDelaySeconds: 2

    ## Seconds between consecutive probes
    periodSeconds: 5

    ## Seconds before the probe times out
    timeoutSeconds: 1

  ## Readiness probe for the default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
  readinessProbe:

    ## Minimum number of consecutive successes before the probe is considered successful
    successThreshold: 1

    ## Minimum number of consecutive failures before the probe is considered failed
    failureThreshold: 3

    ## Seconds after container starts before the probe is initialized
    initialDelaySeconds: 2

    ## Seconds between consecutive probes
    periodSeconds: 5

    ## Seconds before the probe times out
    timeoutSeconds: 1

  ## Additional volumes to attach to the ui pod
  volumes: []
    # - name: configmap-volume
    #   configMap:
    #     name: configmap-name
    # - name: secret-volume
    #   secret:
    #     secretName: secret-name

  ## Additioanl volume mounts to attach to the UI container
  volumeMounts: []
    # - name: configmap-volume
    #   mountPath: /mnt/configmap
    # - name: secret-volume
    #   mountPath: /mnt/secret
    #   readOnly: true

  ## UI service configurations
  service:

    ## Service type
    ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP

    ## Service labels
    labels: {}

    ## Service annotations
    annotations: {}

    ## HTTP service port
    port: 3000

    ## HTTP service port name
    portName: http

    ## HTTP service node port
    ## No effect unless `ui.service.type` is `NodePort`
    nodePort: 30080

    ## IP of the load balancer to create
    ## No effect unless `ui.service.type` is `LoadBalancer`
    loadBalancerIP: ""

    ## Source IP ranges that can access the service
    loadBalancerSourceRanges: []

    ## External IPs that can be used to access the service
    externalIPs: []

    ## Control how traffic from external sources are routed
    ## Supports `Cluster` or `Local`
    externalTrafficPolicy: ""

    ## Control session-based routing of client connections
    ## Supports `ClientIP` or `None`
    sessionAffinity: ""

  ## Resource requests and limits for the UI pod
  resources: {}
    # requests:
    #   cpu: 250m
    #   memory: 256Mi
    # limits:
    #   cpu: 500m
    #   memory: 512Mi

  ## UI node selector configurations
  nodeSelector: {}

  ## UI tolerations configurations
  tolerations: []

  ## UI affinity configurations
  affinity: {}

## Postgres configurations
postgres:

  ## Deploy postgres
  enabled: true
  name: postgres

  ## Number of postgres pods to run
  ## No effect unless `autoscaling.enabled` is `false`
  replicas: 1

  ## Postgres image configurations
  image:

    ## The image repository to use for the postgres deployment
    repository: postgres

    ## The image tag to use instead of the default {{ .Chart.AppVersion }}
    tag: 14-alpine

    ## The pull policy to use when pulling (downloading) the postgres image
    ## Ref: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
    pullPolicy: IfNotPresent

  ## One or more Secret to use when pulling the postgres image
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []
    # - name: "image-pull-secret"

  ## Additional labels to apply to all resources
  ## Global values will be merged into local values
  labels: {}

  ## Environment variables to pass to the postgres container
  env: []
    # - name: "INFRA_LOG_LEVEL"
    #   value: "info"

  ## ConfigMap or Secret references containing environment variables to pass to the postgres container
  ## Ref: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  envFrom: []
    # - configMapRef:
    #     name: configmap-name
    # - secretRef:
    #     name: secret-name

  ## Postgres service account configurations
  serviceAccount:

    ## Create the service account
    create: true

    ## Name of the service account to use instead of the default templated fullname
    name: ""

    ## Annotations to apply to the service account
    annotations: {}

    ## Automount service account API credentials
    automountServiceAccountToken: true

  ## Labels to apply to the postgres pod
  podLabels: {}

  ## Annotations to apply to the postgres pod
  podAnnotations: {}

  ## Security context for the postgres pod
  podSecurityContext: {}
    # fsGroup: 2000

  ## Security context for the postgres container
  securityContext: {}
    # runAsNonRoot: true
    # runAsUser: 999
    # runAsGroup: 999
    # readOnlyRootFilesystem: true

  ## Liveness probe for the default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
  livenessProbe:

    ## Minimum number of consecutive successes before the probe is considered successful
    successThreshold: 1

    ## Minimum number of consecutive failures before the probe is considered failed
    failureThreshold: 3

    ## Seconds after container starts before the probe is initialized
    initialDelaySeconds: 10

    ## Seconds between consecutive probes
    periodSeconds: 10

    ## Seconds before the probe times out
    timeoutSeconds: 1

  ## Readiness probe for the default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
  readinessProbe:

    ## Minimum number of consecutive successes before the probe is considered successful
    successThreshold: 1

    ## Minimum number of consecutive failures before the probe is considered failed
    failureThreshold: 3

    ## Seconds after container starts before the probe is initialized
    initialDelaySeconds: 10

    ## Seconds between consecutive probes
    periodSeconds: 10

    ## Seconds before the probe times out
    timeoutSeconds: 1

  ## Additional volumes to attach to the postgres pod
  volumes: []
    # - name: configmap-volume
    #   configMap:
    #     name: configmap-name
    # - name: secret-volume
    #   secret:
    #     secretName: secret-name

  ## Additioanl volume mounts to attach to the postgres container
  volumeMounts: []
    # - name: configmap-volume
    #   mountPath: /mnt/configmap
    # - name: secret-volume
    #   mountPath: /mnt/secret
    #   readOnly: true

  ## Postgres service configurations
  service:

    ## Service type
    ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP

    ## Service labels
    labels: {}

    ## Service annotations
    annotations: {}

    ## Postgres service port
    port: 5432

    ## HTTP service port name
    portName: postgres

    ## HTTP service node port
    ## No effect unless `postgres.service.type` is `NodePort`
    nodePort: 35432

    ## IP of the load balancer to create
    ## No effect unless `postgres.service.type` is `LoadBalancer`
    loadBalancerIP: ""

    ## Source IP ranges that can access the service
    loadBalancerSourceRanges: []

    ## External IPs that can be used to access the service
    externalIPs: []

    ## Control how traffic from external sources are routed
    ## Supports `Cluster` or `Local`
    externalTrafficPolicy: ""

    ## Control session-based routing of client connections
    ## Supports `ClientIP` or `None`
    sessionAffinity: ""

  ## Postgres persistence configurations
  persistence:

    ## Persistence labels
    labels: {}

    ## Persistence annotations
    annotations: {}

    ## Name of the storage controller that will implement this resource
    className: ""

    ## Resource requests and limits for the persistence
    resources:
      requests:
        storage: 2Gi
    #   limits:
    #     storage: 4Gi

  ## Resource requests and limits for the postgres pod
  resources: {}
    # requests:
    #   cpu: 250m
    #   memory: 256Mi
    # limits:
    #   cpu: 500m
    #   memory: 512Mi

  ## Postgres node selector configurations
  nodeSelector: {}

  ## Postgres tolerations configurations
  tolerations: []

  ## Postgres affinity configurations
  affinity: {}
